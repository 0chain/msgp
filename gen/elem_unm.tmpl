{{/* Gross switch */}}{{define "ElemTempl"}}{{if eq (.Type) 1 }}{{/*Ptr*/}}{{template "PtrTempl" .Ptr}}{{else if eq (.Type) 2 }}{{/*Slice*/}}{{template "SliceTempl" .Slice}}{{else if eq (.Type) 3 }}{{/*Struct*/}}{{template "StructTempl" .Struct}}{{else if eq (.Type) 4 }}{{/*Base*/}}{{template "BaseTempl" .Base}}{{else if eq (.Type) 5 }}{{template "MapTempl" .Map}}{{else if eq (.Type) 6 }}{{template "ArrayTempl" .Array}}{{end}}{{end}}

{{define "BaseTempl"}}
	{{if .Convert}}var tmp {{.BaseType}}{{end}}{{/* type lowering shim */}}
	{{if eq (.Value) 1}}{{/* is []byte */}}
	{{if .Convert}}tmp, bts, err = enc.ReadBytesBytes(bts, []byte({{.Varname}})){{else}}{{.Varname}}, bts, err = enc.ReadBytesBytes(bts, {{.Varname}}){{end}}
	{{else if .IsIdent}}{{/* is ReaderFrom */}}
	bts, err = {{.Varname}}.UnmarshalMsg(bts)
	{{else}}{{/* any other type */}}
	{{if .Convert}}tmp, bts, err = enc.Read{{.BaseName}}Bytes(bts){{else}}{{.Varname}}, bts, err = enc.Read{{.BaseName}}Bytes(bts){{end}}
	{{end}}
	{{if .Convert}}{{.Varname}} = {{.Ident}}(tmp){{end}}
	if err != nil {
		return
	}
{{end}}

{{define "PtrTempl"}}
	if enc.IsNil(bts) {
		bts, err = enc.ReadNilBytes(bts)
		if err != nil {
			return
		}
		{{.Varname}} = nil
	} else {
		if {{.Varname}} == nil {
			{{.Varname}} = new({{.Value.TypeName}})
		}
		{{template "ElemTempl" .Value}}
	}
{{end}}

{{define "MapTempl"}}
	sz, bts, err = enc.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	if {{.Varname}} == nil && sz > 0 {
		{{.Varname}} = make({{.TypeName}}, int(sz))
	} else if len({{.Varname}}) > 0 {
		for key, _ := range {{.Varname}} {
			delete({{.Varname}}, key)
		}
	}
	for inx := uint32(0); inx < sz; inx++ {
		var {{.Keyidx}} string 
		var {{.Validx}} {{.Value.TypeName}}
		{{.Keyidx}}, bts, err = enc.ReadStringBytes(bts)
		if err != nil {
			return
		}
		{{template "ElemTempl" .Value}}
		{{.Varname}}[{{.Keyidx}}] = {{.Validx}}
	}
{{end}}

{{define "SliceTempl"}}
	var xsz uint32
	xsz, bts, err = enc.ReadArrayHeaderBytes(bts)
	if cap({{.Varname}}) >= int(xsz) {
		{{.Varname}} = {{.Varname}}[0:0]
	} else {
		{{.Varname}} = make({{.TypeName}}, int(xsz))
	}
	for {{.Index}} := range {{.Varname}} {
		{{template "ElemTempl" .Els}}
	}
{{end}}

{{define "ArrayTempl"}}
	var asz uint32
	asz, bts, err = enc.ReadArrayHeaderBytes(bts)
	if int(asz) != {{.Size}} {
		err = enc.ArrayError{asz, {{.Size}}}
		return
	}
	for {{.Index}} := range {{.Varname}} {
		{{template "ElemTempl" .Els}}
	}
{{end}}

{{define "StructTempl"}}
	var isz uint32
	isz, bts, err = enc.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for xplz := uint32(0); xplz < isz; xplz++ {
		field, bts, err = enc.ReadStringZC(bts)
		if err != nil {
			return
		}
		switch enc.UnsafeString(field) {
		{{range .Fields}}
		case "{{.FieldTag}}":{{template "ElemTempl" .FieldElem}}
		default:
			bts, err = enc.Skip(bts)
			if err != nil {
				return
			}
		{{end}}
		}
	}
{{end}}