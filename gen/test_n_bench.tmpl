func Test{{.Name}}EncodeDecode(t *testing.T) {
	t.Parallel()
	v := new({{.Name}})
	var buf bytes.Buffer
	n, _ := v.EncodeMsg(&buf)

	if n > v.Maxsize() {
		t.Logf("WARNING: Maxsize() for %v is inaccurate", v)
	}

	vn := new({{.Name}})
	nr, err := vn.DecodeMsg(&buf)
	if err != nil {
		t.Error(err)
	}

	if nr != n {
		t.Errorf("Wrote %d bytes; read %d bytes", n, nr)
	}

	buf.Reset()
	v.EncodeMsg(&buf)
	// Validate encoding by "skipping"
	// the entire object
	_, err = enc.NewDecoder(&buf).Skip()
	if err != nil {
		t.Error(err)
	}
}

func Test{{.Name}}MarshalUnmarshal(t *testing.T) {
	v := new({{.Name}})
	bts, err := v.MarshalMsg()
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.UnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after UnmarshalMsg()", len(left))
	}

	left, err = enc.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip()", len(left))
	}
}

func Benchmark{{.Name}}Encode(b *testing.B) {
	v := new({{.Name}})
	var buf bytes.Buffer
	en := enc.NewEncoder(&buf)
	v.EncodeTo(en)
	b.ReportAllocs()
	b.SetBytes(int64(buf.Len()))
	b.ResetTimer()
	for i:=0; i<b.N; i++ {
		buf.Reset()
		v.EncodeTo(en)
	}
}

func Benchmark{{.Name}}Decode(b *testing.B) {
	v := new({{.Name}})
	var buf bytes.Buffer
	v.EncodeMsg(&buf)
	rd := bytes.NewReader(buf.Bytes())
	dc := enc.NewDecoder(rd)
	b.ReportAllocs()
	b.SetBytes(int64(buf.Len()))
	b.ResetTimer()
	for i:=0; i<b.N; i++ {
		rd.Seek(0, 0)
		_, err := v.DecodeFrom(dc)
		if  err != nil {
			b.Fatal(err)
		}
	}
}

func Benchmark{{.Name}}MarshalMsg(b *testing.B) {
	v := new({{.Name}})
	b.ReportAllocs()
	b.ResetTimer()
	for i:=0; i<b.N; i++ {
		v.MarshalMsg()
	}
}

func Benchmark{{.Name}}AppendMsg(b *testing.B) {
	v := new({{.Name}})
	bts := make([]byte, v.Maxsize())
	b.ReportAllocs()
	b.ResetTimer()
	for i:=0; i<b.N; i++ {
		bts, _ = v.AppendMsg(bts[0:0])
	}
}

func Benchmark{{.Name}}Unmarshal(b *testing.B) {
	v := new({{.Name}})
	var buf bytes.Buffer
	v.EncodeMsg(&buf)
	b.ReportAllocs()
	b.SetBytes(int64(buf.Len()))
	b.ResetTimer()
	for i:=0; i<b.N; i++ {
		_, err := v.UnmarshalMsg(buf.Bytes())
		if err != nil {
			b.Fatal(err)
		}
	}
}
