{{/* Gross switch */}}{{define "ElemTempl"}}{{if eq (.Type) 1 }}{{/*Ptr*/}}{{template "PtrTempl" .Ptr}}{{else if eq (.Type) 2 }}{{/*Slice*/}}{{template "SliceTempl" .Slice}}{{else if eq (.Type) 3 }}{{/*Struct*/}}{{template "StructTempl" .Struct}}{{else if eq (.Type) 4 }}{{/*Base*/}}{{template "BaseTempl" .Base}}{{else if eq (.Type) 5 }}{{template "MapTempl" .Map}}{{else if eq (.Type) 6 }}{{template "ArrayTempl" .Array}}{{end}}{{end}}

{{define "PtrTempl"}}
	if dc.IsNil() {
		nn, err = dc.ReadNil()
		n += nn
		if err != nil {
			return
		}
		{{.Varname}} = nil
	} else {
		if {{.Varname}} == nil {
			{{.Varname}} = new({{.Value.TypeName}})
		}
		{{template "ElemTempl" .Value}}	
	}
	{{end}}

{{define "MapTempl"}}
	var msz uint32
	msz, nn, err = dc.ReadMapHeader()
	n += nn
	if err != nil {
		return
	}
	if {{.Varname}} == nil && msz > 0 {
		{{.Varname}} = make({{.TypeName}}, int(msz))
	} else if len({{.Varname}}) > 0 {
		for key, _ := range {{.Varname}} {
			delete({{.Varname}}, key)
		}
	}
	for inx := uint32(0); inx < msz; inx++ {
		var {{.Keyidx}} string 
		var {{.Validx}} {{.Value.TypeName}} {{/* TODO: *real* initialization here... this could fail. */}}
		{{.Keyidx}}, nn, err = dc.ReadString()
		n += nn
		if err != nil {
			return
		}
		{{template "ElemTempl" .Value}}
		{{.Varname}}[{{.Keyidx}}] = {{.Validx}}
	}
	{{end}}

{{define "SliceTempl"}}
	var xsz uint32
	xsz, nn, err = dc.ReadArrayHeader()
	n += nn
	if err != nil {
		return
	}
	if cap({{.Varname}}) > 0 && cap({{.Varname}}) >= int(xsz){
		{{.Varname}} = {{.Varname}}[0:int(xsz)]
	} else {
		{{.Varname}} = make({{.TypeName}}, int(xsz))
	}
	for {{.Index}} := range {{.Varname}} {
		{{template "ElemTempl" .Els}}
	}
	{{end}}

{{define "ArrayTempl"}}
	var asz uint32 
	asz, nn, err = dc.ReadArrayHeader()
	n += nn
	if err != nil {
		return
	}
	if asz != {{.Size}} {
		err = msgp.ArrayError{Wanted: {{.Size}}, Got: asz}
		return
	}
	for {{.Index}} := range {{.Varname}} {
		{{template "ElemTempl" .Els}}
	}
	{{end}}

{{define "StructTempl"}}
	var isz uint32
	isz, nn, err = dc.ReadMapHeader()
	n += nn
	if err != nil {
		return
	}
	for xplz:=uint32(0); xplz<isz; xplz++ {
		field, nn, err = dc.ReadMapKey(field)
		n += nn
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		{{range .Fields}}
		case "{{ .FieldTag}}":{{template "ElemTempl" .FieldElem}}
		{{end}}
		default:
			nn, err = dc.Skip()
			n += nn
			if err != nil {
				return
			}
		}
	}	
{{end}}

{{define "BaseTempl"}}{{/* TODO: make this less gross */}}
	{{if .Convert}}var tmp {{.BaseType}}{{end}}{{/* type lowering shim */}}
	{{if eq (.Value) 1}}{{/* is []byte */}}
	{{if .Convert}}tmp, nn, err = dc.ReadBytes([]byte({{.Varname}})){{else}}{{.Varname}}, nn, err = dc.ReadBytes({{.Varname}}){{end}}
	{{else if .IsIdent}}
	nn, err = {{.Varname}}.DecodeFrom(dc)
	{{else if .IsExt}}
	nn, err = dc.ReadExtension({{.Varname}})
	{{else}}{{/* any other type */}}
	{{if .Convert}}tmp, nn, err = dc.Read{{.BaseName}}(){{else}}{{.Varname}}, nn, err = dc.Read{{.BaseName}}(){{end}}
	{{end}}
	{{if .Convert}}{{.Varname}} = {{.Ident}}(tmp){{end}}
	n += nn
	if err != nil {
		return
	}
	{{end}}
