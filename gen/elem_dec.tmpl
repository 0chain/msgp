{{/* Gross switch */}}{{define "ElemTempl"}}{{if eq (.Type) 1 }}{{/*Ptr*/}}{{template "PtrTempl" .Ptr}}{{else if eq (.Type) 2 }}{{/*Slice*/}}{{template "SliceTempl" .Slice}}{{else if eq (.Type) 3 }}{{/*Struct*/}}{{template "StructTempl" .Struct}}{{else if eq (.Type) 4 }}{{/*Base*/}}{{template "BaseTempl" .Base}}{{end}}{{end}}

{{define "PtrTempl"}}
	if dc.IsNil() {
		nn, err = dc.ReadNil()
		n += nn
		if err != nil {
			return
		}
		{{.Varname}} = nil
	} else {
		if {{.Varname}} == nil {
			{{.Varname}} = new({{.TypeName}})
		}
		{{template "ElemTempl" .Value}}	
	}
{{end}}

{{define "SliceTempl"}}
	sz, nn, err = dc.ReadArrayHeader()
	n += nn
	if err != nil {
		return
	}
	if cap({{.Varname}}) > 0 {
		if cap({{.Varname}})>= int(sz) {
			{{.Varname}} = {{.Varname}}[0:int(sz)]
		} else {
			extra := make([]{{.TypeName}}, int(sz))
			{{.Varname}} = append({{.Varname}}[0:cap({{.Varname}})], extra...)
		}
	} else {
		{{.Varname}} = make([]{{.TypeName}}, sz)
	}
	for i := range {{.Varname}} {
		{{template "ElemTempl" .Els}}
	}
{{end}}

{{define "StructTempl"}}
	sz, nn, err = dc.ReadMapHeader()
	n += nn
	if err != nil {
		return
	}
	for xplz:=uint32(0); xplz<sz; xplz++ {
		field, nn, err = dc.ReadStringAsBytes(field)
		n += nn
		if err != nil {
			return
		}
		switch enc.UnsafeString(field) {
		{{range .Fields}}
		case "{{ .FieldTag}}":{{template "ElemTempl" .FieldElem}}
		{{end}}
		}
	}	
{{end}}

{{define "BaseTempl"}}
	{{if eq (.Value) 1}}{{/* is []byte */}}
	{{.Varname}}, nn, err = dc.ReadBytes({{.Varname}})
	{{else if .IsMap }}{{/* is map[string]string or map[string]interface{} */}}
	if {{.Varname}} == nil {
		{{.Varname}} = make({{.TypeName}})
	}
	nn, err = dc.Read{{.BaseName}}({{.Varname}})
	{{else if .IsIntf }}
	nn, err = dc.ReadIntf({{.Varname}})
	{{else if .IsIdent}}
	nn, err = dc.ReadIdent({{.Varname}})
	{{else}}
	{{.Varname}}, nn, err = dc.Read{{.BaseName}}()
	{{end}}
	n += nn
	if err != nil {
		return
	}
{{end}}